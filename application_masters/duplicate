from health_management.models import *
import uuid
import datetime

Patients.objects.values('patient_id').annotate(count=Count('id')).filter(count__gt=1)

from health_management.models import *
for i in Diagnosis.objects.all():
    i.save()


dgs_id = Diagnosis.objects.filter(patient_uuid='d5c5537e-de6c-4b5f-92f4-e677bcaa2b2d').values_list('id', flat=True)
trmt_id = Treatments.objects.filter(patient_uuid='d5c5537e-de6c-4b5f-92f4-e677bcaa2b2d').values_list('id', flat=True)
prt_id = Prescription.objects.filter(patient_uuid='d5c5537e-de6c-4b5f-92f4-e677bcaa2b2d').values_list('id', flat=True)
sr_id = Scanned_Report.objects.filter(patient_uuid='d5c5537e-de6c-4b5f-92f4-e677bcaa2b2d').values_list('id', flat=True)
hv_id = HomeVisit.objects.filter(patient_uuid='d5c5537e-de6c-4b5f-92f4-e677bcaa2b2d').values_list('id', flat=True)

dgs_id = Diagnosis.objects.filter(patient_uuid='20230623151457156a379f28-8f05-4396-8001-a6669cc21981').values_list('id', flat=True)
trmt_id = Treatments.objects.filter(patient_uuid='20230623151457156a379f28-8f05-4396-8001-a6669cc21981').values_list('id', flat=True)
prt_id = Prescription.objects.filter(patient_uuid='20230623151457156a379f28-8f05-4396-8001-a6669cc21981').values_list('id', flat=True)
sr_id = Scanned_Report.objects.filter(patient_uuid='20230623151457156a379f28-8f05-4396-8001-a6669cc21981').values_list('id', flat=True)
hv_id = HomeVisit.objects.filter(patient_uuid='20230623151457156a379f28-8f05-4396-8001-a6669cc21981').values_list('id', flat=True)
pts = Patients.objects.filter(village_id=14).first().uuid
Diagnosis.objects.filter(id__in=dgs_id).update(patient_uuid=pts)
Treatments.objects.filter(id__in=trmt_id).update(patient_uuid=pts)
Prescription.objects.filter(id__in=prt_id).update(patient_uuid=pts)
Scanned_Report.objects.filter(id__in=sr_id).update(patient_uuid=pts)
HomeVisit.objects.filter(id__in=hv_id).update(patient_uuid=pts)

pts = Patients.objects.filter(village_id=14)
for d in pts:
    curr_dt = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
    uuid_id = str(curr_dt) + "-" + str(uuid.uuid4())
    pts = Patients.objects.filter(id=d.id).update(uuid=uuid_id)

from health_management.models import *
from django.db.models import Count
duplicates = Patients.objects.values('patient_id').annotate(Count('id')).order_by().filter(id__count__gt=1)
for duplicate in duplicates:
    pt = Patients.objects.filter(patient_id=duplicate['patient_id']).values_list('id', flat=True).order_by('server_created_on').first()
    gpt = Patients.objects.filter(id=pt).update(status=1)
    print('Done')


from health_management.models import *
clinic_data = ClinicProfile.objects.filter(status=2)
for cd in clinic_data:
    clk_data = ClinicProfile.objects.filter(code=cd.code).values('visit_date', 'code', 'height', 'weight').order_by('visit_date').first()
    if clk_data['height'] != '':
        ClinicProfile.objects.filter(status=2, code=clk_data['code']).update(
        height=clk_data['height'].replace('.', ''))
        ClinicProfile.objects.filter(status=2, code=clk_data['code']).update(
        height=clk_data['height'].replace(',', ''))

from health_management.models import *
clinic_data = ClinicProfile.objects.filter(status=2)
for cd in clinic_data:
    clk_data = ClinicProfile.objects.filter(code=cd.code).values('visit_date', 'code', 'height', 'weight').order_by('visit_date').first()
    if clk_data['height'] != '':
        ClinicProfile.objects.filter(status=2, code=clk_data['code']).update(
        height=clk_data['height'].replace(',', ''))

from health_management.models import *
clinic_data = ClinicProfile.objects.filter(status=2)
import decimal
for cd in clinic_data:
    clk_data = ClinicProfile.objects.filter(code=cd.code).values('visit_date', 'code', 'height', 'weight').order_by('visit_date').first()
    Patients.objects.filter(status=2, patient_id=clk_data['code']).update(
        registered_date=clk_data['visit_date'])
    if clk_data['height'] != '':
        Patients.objects.filter(status=2, patient_id=clk_data['code']).update(
        height=int(clk_data['height']))
    if clk_data['weight'] != '':
        Patients.objects.filter(status=2, patient_id=clk_data['code']).update(
        weight=decimal.Decimal(clk_data['weight'].replace(',', '.')))

patients_ids=Patients.objects.filter(status=2).values_list('uuid', flat=True)
treatments_ids=Treatments.objects.exclude(status=2, patient_uuid__in=patients_ids)

from health_management.models import *
import pandas as pd
pf = pd.read_excel(r'/home/sb-010/Downloads/Mistake_Data.xlsx')
for p in pf.iterrows():
    pts = Patients.objects.filter(patient_id=p[1]['patient'], status=2).values_list('uuid', flat=True).first()
    if pts:
        Treatments.objects.filter(patient_uuid=p[1]['uuid']).update(patient_uuid=pts)
        Prescription.objects.filter(patient_uuid=p[1]['uuid']).update(patient_uuid=pts)
        Scanned_Report.objects.filter(patient_uuid=p[1]['uuid']).update(patient_uuid=pts)
        HomeVisit.objects.filter(patient_uuid=p[1]['uuid']).update(patient_uuid=pts)

from health_management.models import *
import pandas as pd
df = pd.read_excel(r'/home/sb-010/Downloads/Mistake_Data2.xlsx')
for d in df.iterrows():
    pts = Patients.objects.filter(patient_id=d[1]['patient'], status=2).values_list('uuid', flat=True).first()
    if pts:
        Diagnosis.objects.filter(patient_uuid=d[1]['uuid']).update(patient_uuid=pts)


from health_management.models import *
import pandas as pd
import datetime
import math
pf = pd.read_excel(r'/home/sb-010/Downloads/Patients-2023-07-08.xlsx')
for i in pf.iterrows():
    pts = Patients.objects.filter(patient_id=i[1]['patient_id'], status=i[1]['status']).first()
    if i[1]['uuid'] and i[1]['patient_id'] and i[1]['user_uuid']:
        if pts:
            curr_dt = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            uuid_id = str(curr_dt) + "-" + str(uuid.uuid4())
            fee_obj = FeePayement.objects.create(uuid=uuid_id,user_uuid=pts.user_uuid, patient_uuid=pts.uuid)
            if math.isnan(i[1]['fee_status']) != True:
                s1 = int(i[1]['fee_status'])
            fee_obj.fee_status = s1 or 0
            if math.isnan(i[1]['fee_paid']) != True:
                s2 = int(i[1]['fee_paid'])
            fee_obj.fee_paid = s2 or 0 
            if str(pd.to_datetime(i[1]['fee_date']))!= ('NaT'):
                fee_obj.payment_date = pd.to_datetime(i[1]['fee_date'])
            fee_obj.save()
            print(pts,'----')

from health_management.models import *
dgs = Diagnosis.objects.exclude(years__icontains='-')
for i in dgs:
    if i.years:
        print(i.years)
        mm_yy = '1-' + i.years
        Diagnosis.objects.filter(id=i.id).update(years=mm_yy)
        a+=1
print(a)

print(a)
from health_management.models import *
dgs = Diagnosis.objects.filter()
for i in dgs:
    if i.years:
        pp = i.years.split('-')[1]
        pl = i.years.split('-')[0]
        if len(pp) < 3:
            if int(pp) < 10:
                yy_200 = pl+'-200'+ pp
                Diagnosis.objects.filter(id=i.id).update(years=yy_200)
            if int(pp) > 9:
                yy_20 = pl+'-20'+ pp
                Diagnosis.objects.filter(id=i.id).update(years=yy_20)

from health_management.models import *
from datetime import datetime
dgs = Diagnosis.objects.filter()
for i in dgs:
    if i.years:
        pp = i.years.split('-')[1]
        pl = i.years.split('-')[0]
        dby_date = '01-'+i.years
        date = datetime.strptime(dby_date, '%d-%m-%Y').date()
        print(i.id, dby_date)
        dgs = Diagnosis.objects.filter(id=i.id).update(detected_years=date)

from health_management.models import *
c_htn = ClinicProfile.objects.exclude(detected_since_htn__icontains='-')
c_dm = ClinicProfile.objects.exclude(detected_since_dm__icontains='-')
for dm in c_dm:
    if dm.detected_since_dm:
        ddm_date = '01-01-'+dm.detected_since_dm
        ClinicProfile.objects.filter(id=dm.id).update(detected_since_dm=ddm_date)
    
for htn in c_htn:
    if htn.detected_since_htn:
        dhtn_date = '01-01-'+htn.detected_since_htn
        ClinicProfile.objects.filter(id=htn.id).update(detected_since_htn=dhtn_date)
        

clds = ClinicProfile.objects.filter()
for cld in clds:
    if cld.detected_since_dm:
        len_dm_f = cld.detected_since_dm.split('-')[-1]
        len_dm_l = cld.detected_since_dm.split('-')[-2]
        if len(len_dm_f) < 3 and len(len_dm_f) != 1:
            if int(len_dm_f) < 99:
                dm_20 = '01-'+ len_dm_l +'-20' +len_dm_f
                ClinicProfile.objects.filter(id=cld.id).update(detected_since_dm=dm_20)
            if int(len_dm_f) >= 99:
                dm_19 = '01-'+ len_dm_l +'-19' +len_dm_f
                ClinicProfile.objects.filter(id=cld.id).update(detected_since_dm=dm_19)
    if cld.detected_since_htn:
        len_htn_f = cld.detected_since_htn.split('-')[-1]
        len_htn_l = cld.detected_since_htn.split('-')[-2]
        if len(len_htn_f) < 3:
            if int(len_htn_f) < 99:
                htn_20 = '01-'+ len_htn_l +'-20' +len_htn_f
                ClinicProfile.objects.filter(id=cld.id).update(detected_since_htn=htn_20)
            if int(len_htn_f) >= 99:
                htn_19 = '01-'+ len_htn_l +'-19' +len_htn_f
                ClinicProfile.objects.filter(id=cld.id).update(detected_since_htn=htn_19)

clds = ClinicProfile.objects.filter(status=2, detected_since_dm='01-01-')
for cld in clds:
    ClinicProfile.objects.filter(id=cld.id).update(detected_since_dm='')

clds = ClinicProfile.objects.filter(status=2, detected_since_htn='01-01-')
for cld in clds:
    ClinicProfile.objects.filter(id=cld.id).update(detected_since_htn='')

clds = ClinicProfile.objects.filter(status=2)
for cld in clds:
    if cld.detected_since_htn:
        print(cld.detected_since_htn, len(cld.detected_since_htn), 'htn')
    if cld.detected_since_dm:
        print(cld.detected_since_dm, len(cld.detected_since_dm),'dm')
    ClinicProfile.objects.filter(id=cld.id).update(detected_since_dm='') 

for cd in clinic_data:
    curr_dt = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
    uuid_id = str(curr_dt) + "-" + str(uuid.uuid4())
    try:
        patients_ids=Patients.objects.get(status=2, patient_id=cd.code)



            
    # if len(i.years) > 5:
    #     mm_yy = i.years[:3]+i.years[-2:]
    #     print(mm_yy)
        # Diagnosis.objects.filter(id=i.id).update(years=mm_yy)

from health_management.models import *
dgs = Diagnosis.objects.filter()
for i in dgs:
    if i.years:
        mm_yy = i.years[-2:]
        if int(mm_yy) > 23:
            yy_19 = '19'+ mm_yy
            Diagnosis.objects.filter(id=i.id).update(years=yy_19)
        if int(mm_yy) < 24:
            yy_20 = '20'+ mm_yy
            Diagnosis.objects.filter(id=i.id).update(years=yy_20)



from health_management.models import *
from datetime import date
from dateutil.relativedelta import relativedelta
current_date = date(2023, 1, 1)
pts=Patients.objects.filter(dob__isnull=True)
for pt in pts:
    if pt.age:
        future_date = current_date - relativedelta(years=pt.age)
        Patients.objects.filter(id=pt.id).update(dob=future_date)

        print(future_date)
        
from health_management.models import *
from django.db.models import Count
pts = Patients.objects.values('patient_id').annotate(count=Count('id')).filter(count__gt=1)
print(pts)
for pt in pts:
    print(pt['patient_id'])
    excp = Patients.objects.filter(patient_id=pt['patient_id']).order_by('-server_created_on').first()
    Patients.objects.filter(patient_id=pt['patient_id']).exclude(id=excp.id).update(status=1)

from health_management.models import *
pts=Patients.objects.filter(status=2)
for pt in pts:
    try:
        ht_obj = Health.objects.get(patient_uuid=pt.uuid)
        ht_obj.server_created_on = pt.registered_date if pt.registered_date !='' else pt.server_created_on
        ht_obj.server_modified_on = pt.registered_date if pt.registered_date !='' else pt.server_modified_on
        ht_obj.save()
    except Health.DoesNotExist:
        ht_obj = None
    

    




from health_management.models import *
clds = ClinicProfile.objects.filter(status=2)
for cld in clds:
    if cld.detected_since_dm:
        if len(cld.detected_since_dm) <= 7:
            dm_date = '01-' + cld.detected_since_dm
            ClinicProfile.objects.filter(id=cld.id).update(detected_since_dm=dm_date)
    if cld.detected_since_htn:
        if len(cld.detected_since_htn) <= 7:
            htn_date = '01-' + cld.detected_since_htn
            ClinicProfile.objects.filter(id=cld.id).update(detected_since_htn=htn_date)

clds = ClinicProfile.objects.filter(status=2, detected_since_htn='01-01-')
for cld in clds:
    ClinicProfile.objects.filter(id=cld.id).update(detected_since_htn='')




from health_management.models import *
clc_vlu = ClinicProfileTwo.objects.filter(status=2)
for cld in clc_vlu:
    if cld.detected_since_ht:
        ht_moth = cld.detected_since_ht.split('-')[0]
        ht_year = cld.detected_since_ht.split('-')[1]
        
    if cld.detected_since_dm:
        dm_month = cld.detected_since_dm.split('-')[0]
        dm_year = cld.detected_since_dm.split('-')[1]
        # print()

from health_management.models import *
pts = Patients.objects.filter(status=2)
for pt in pts:
    visit_date = Treatments.objects.filter(patient_uuid=pt.uuid).order_by('visit_date').first()
    if visit_date:
        Patients.objects.filter(status=2, uuid=visit_date.patient_uuid).update(registered_date=visit_date.visit_date)

Patients.objects.filter(server_modified_on__date='2023-08-30').count() 

#------------------------------------------------- #

from health_management.models import *
heath_data = Health.objects.filter()
for hd in heath_data:
    Health.objects.filter(id=hd.id).update(pdm_year=None,pdm_source_treatment=0,pdm_detected_by=0,dm_year=None,dm_source_treatment=0,dm_detected_by=0, pht_year=None,pht_source_treatment=0,pht_detected_by=0,ht_year=None,ht_source_treatment=0,ht_detected_by=0)
    if hd.dm_status == 1:
        Health.objects.filter(id=hd.id).update(pdm_year=hd.dm_years,pdm_source_treatment=hd.dm_source_treatment,pdm_detected_by=hd.dm_detected_by)
    if hd.dm_status == 2:
        Health.objects.filter(id=hd.id).update(dm_year=hd.dm_years,dm_source_treatment=hd.dm_source_treatment,dm_detected_by=hd.dm_detected_by)
    if hd.ht_status == 1:
        Health.objects.filter(id=hd.id).update(pht_year=hd.ht_years,pht_source_treatment=hd.ht_source_treatment,pht_detected_by=hd.ht_detected_by)
    if hd.ht_status == 2:
        Health.objects.filter(id=hd.id).update(ht_year=hd.ht_years,ht_source_treatment=hd.ht_source_treatment,ht_detected_by=hd.ht_detected_by)
    # if


from health_management.models import *
import uuid
import datetime
heath_data = Health.objects.filter()
for hd in heath_data:
    if hd.co_morbid_ids:
        number_list = [int(num) for num in hd.co_morbid_ids.split(',')]
        for num in number_list:
            curr_dt = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            uuid_id = str(curr_dt) + "-" + str(uuid.uuid4())
            obj,created = PatientComorbids.objects.update_or_create(
                uuid = uuid_id,
                patient_uuid = hd.patient_uuid,
                co_morbid_id= num,
                defaults = {
                    'month_year':hd.dm_years or hd.ht_years
                }
            )

from health_management.models import *
import uuid
import datetime
clinic_data = ClinicProfile.objects.filter()
for cd in clinic_data:
    curr_dt = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
    uuid_id = str(curr_dt) + "-" + str(uuid.uuid4())
    # print(uuid_id)
    patient = ClinicProfile.objects.filter(code=cd.code).order_by('-visit_date').first()
    patients_ids=Patients.objects.filter(status=2, patient_id=patient.code)
    if len(patients_ids)==1:
        user_uuid = patients_ids[0].user_uuid
        patient_uuid = patients_ids[0].uuid
        if cd.detected_since_dm:
            day =cd.detected_since_dm.split('-')[0]
            month = cd.detected_since_dm.split('-')[1]
            year = cd.detected_since_dm.split('-')[2]
            dm_years = datetime.date(int(year), int(month), int(day))
        else:
            dm_years =''
        if cd.detected_since_htn:
            day =cd.detected_since_htn.split('-')[0]
            month = cd.detected_since_htn.split('-')[1]
            year = cd.detected_since_htn.split('-')[2]
            ht_years = datetime.date(int(year), int(month), int(day))
        else:
            ht_years = ''
        if patient.dm == 5 and Health.objects.filter(patient_uuid=patient_uuid, dm_years__isnull=True):
            Health.objects.filter(patient_uuid=patient_uuid).update(pdm_year=dm_years or None, pdm_detected_by=patient.detected_by_dm)
        if patient.dm == 8 and Health.objects.filter(patient_uuid=patient_uuid, dm_years__isnull=True):
            Health.objects.filter(patient_uuid=patient_uuid).update(dm_year=dm_years or None,dm_detected_by=patient.detected_by_dm)
        if patient.htn == 9 and Health.objects.filter(patient_uuid=patient_uuid, ht_years__isnull=True):
            Health.objects.filter(patient_uuid=patient_uuid).update(ht_year=ht_years or None,ht_detected_by=patient.detected_by_htn)
        if patient.htn == 7 and Health.objects.filter(patient_uuid=patient_uuid, ht_years__isnull=True):
            Health.objects.filter(patient_uuid=patient_uuid).update(pht_year=ht_years or None,pht_detected_by=patient.detected_by_htn)
    elif len(patients_ids)>1:
        print('Duplicate PAteint code in system: ', patient.code)
    else:
        print('Patient ID missing: ',patient.code)



from health_management.models import *
import pandas as pd

df = pd.read_excel(r'/home/sb030/Downloads/village2.xlsx')
for d in df.iterrows():
    pts = Patients.objects.filter(patient_id=d[1]['code'], status=2).first()
    if pts:
        if d[1]['ht']==0:
            ht_status=0
        elif d[1]['ht']==1:
            ht_status=2
        else:
            ht_status=1
        if d[1]['dm']==0:
            dm_status=0
        elif d[1]['dm']==1:
            dm_status=2
        else:
            dm_status=1
        Health.objects.filter(patient_uuid=pts.uuid).update(pht_year= None if pd.isna(d[1]['ht_since']) else d[1]['ht_since'],pdm_year= None if pd.isna(d[1]['dm_since']) else d[1]['dm_since'],ht_detected_by=d[1]['detected_by_ht'],dm_detected_by=d[1]['detected_by_dm'],ht_years= None if pd.isna(d[1]['ht_since']) else d[1]['ht_since'],dm_years= None if pd.isna(d[1]['dm_since']) else d[1]['dm_since'],ht_status=ht_status,dm_status=dm_status)

from master_data.models import *
import pandas as pd
df = pd.read_excel(r'/home/sb030/Documents/village2.xl/home/sb030/Documents/village2.xlsxsx')
for _, row in df.iterrows():
    if pd.notna(row['district_id']): 
        dst = District.objects.filter(state__ssmis_id=int(row['dst_state_id']),name__icontains=row['district_name']).update(ssmis_id=int(row['dst_state_id']))


from sims.models import *
partner_list = Patients.objects.values('name','village_id').annotate(Count('id')).order_by('name','village').filter(status=2, id__count__gt=1)
pnt_list = Patients.objects.filter(village__id__in=[pl['village_id'] for pl in partner_list], name__in=[pl['name'] for pl in partner_list]).order_by('name','village')

from csv import writer
with open('duplicate2_list.csv', 'a') as f_object:
    writer_object = writer(f_object)
    writer_object.writerow(['Village','Name', 'Patient ID'])
    for i in pnt_list:
        writer_object.writerow([i.village,i.name,i.patient_id])
    f_object.close()